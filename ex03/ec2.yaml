AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Network Template: Sample template that creates a VPC with DNS and public IPs enabled.

# This template creates:
#   VPC
#   Internet Gateway
#   Public Route Table
#   Public Subnet

#######################
# Parameter section
#######################

Parameters:
  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    Description: Enter instance size. Default is t2.micro.
  AMI:
    Type: String
    Default: ami-0ad704c126371a549
    Description: The Amazon Linux 2 AMI to use.

######################
# Resources section
######################

Resources:

  ## VPC

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:
       - Key: Name
         Value: Lab-VPC
      
  ## Internet Gateway

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  ## Public Route Table

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  ## Public Subnet
  
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: AWS::Region
      Tags:
       - Key: Name
         Value: Public Subnet1    

  ## Private Subnet
  
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: AWS::Region
      Tags:
       - Key: Name
         Value: Private Subnet1    

  ## Private Subnet2
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select 
        - 2
        - !GetAZs 
          Ref: AWS::Region
      Tags:
       - Key: Name
         Value: Private Subnet2    
  
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      NetworkAclId: !GetAtt 
        - VPC
        - DefaultNetworkAcl
  

  ## Security Group
  
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP Access
      GroupName: Web-SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
      Tags:
       - Key: Name
         Value: Web-SG

#  DBSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: Allow RDS Access
#      GroupName: DB-SG
#      VpcId: !Ref VPC
#      SecurityGroupIngress:
#      - IpProtocol: tcp
#        FromPort: 3306
#        ToPort: 3306
#        SourceSecurityGroupId: !Ref InstanceSecurityGroup
#      Tags:
#        - Key: Name
#          Value: DB-SG

  ## DB subnet Group
  LabDBSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: Lab DB Subnet Group
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PublicSubnet
      Tags: 
        - 
          Key: Name
          Value: LabDBSubnetGroup

  ## Linux EC2 instance
  Linux:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMI
      InstanceType:
        Ref: InstanceTypeParameter
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - Ref: InstanceSecurityGroup
#      BlockDeviceMappings:
#        - DeviceName: /dev/sda1
#          Ebs:
#            VolumeSize: 8
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          #Install PHP and Apache Web Server 
          yum install -y httpd
          amazon-linux-extras install -y php7.2
          #Download Lab files
          wget  https://tekstac-lab.s3.us-west-2.amazonaws.com/customer-app.zip
          unzip customer-app.zip -d /var/www/html/
          chown -R apache /var/www/html
          #Download AWS SDK for PHP
          wget https://docs.aws.amazon.com/aws-sdk-php/v3/download/aws.zip
          #Install AWS SDK for PHP
          unzip aws.zip -d /var/www/html/
          #Start the web server
          chkconfig httpd on
          service httpd start
      Tags:
        -
          Key: Name
          Value:  Webserver

######################
# Outputs section
######################

Outputs:
  
  PublicSubnet:
    Description: The subnet ID to use for public web servers
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetID'

  PrivateSubnet1:
    Description: The subnet ID to use for private instance
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet1ID'

  PrivateSubnet2:
    Description: The subnet ID to use for private instance
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet2ID'

  DBSubnetGroup:
    Description: The subnet ID to use for DBSubnetGroup 
    Value: !Ref LabDBSubnetGroup
    Export:
      Name: !Sub '${AWS::StackName}-DBSubnetGroupID'

  VPC:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'


